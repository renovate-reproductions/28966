// Copyright (c) 2021-2022, The Tor Project, Inc.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package gettor

import (
	"fmt"
	"io"
	"net/http"
	"net/mail"
	"strings"

	"github.com/prometheus/client_golang/prometheus/promhttp"
	"gitlab.torproject.org/tpo/anti-censorship/rdsys/internal"
	"gitlab.torproject.org/tpo/anti-censorship/rdsys/pkg/presentation/distributors/common"
	"gitlab.torproject.org/tpo/anti-censorship/rdsys/pkg/usecases/distributors/gettor"
)

// InitFrontend is the entry point to gettor email frontend. It will connect
// to it's IMAP account and process any incoming email until it receives a
// SIGINT.
func InitFrontend(cfg *internal.Config) {
	dist := &gettor.GettorDistributor{}

	handler := func(msg *mail.Message, send common.SendFunction) error {
		subject := msg.Header.Get("Subject")
		body := io.MultiReader(strings.NewReader(subject+"\n"), msg.Body)
		command := dist.ParseCommand(body)
		switch command.Command {
		case gettor.CommandLinks:
			links := dist.GetLinks(command.Platform)
			if len(links) == 0 {
				return sendHelp(dist, send)
			}

			linkMsg := ""
			for _, link := range links {
				linkMsg += "\t" + link.Provider + ": " + link.Link + "\n"
				linkMsg += "\tSignature file: " + link.SigLink + "\n\n"
			}
			verificationComm := fmt.Sprintf(platformVerficationCommand[command.Platform[:3]], links[0].FileName, links[0].FileName)
			body := fmt.Sprintf(linksBody, command.Platform, linkMsg, platformVerfication[command.Platform[:3]], verificationComm)
			return send(linksSubject, body)
		case gettor.CommandHelp:
			return sendHelp(dist, send)
		}
		return nil
	}

	http.Handle("/metrics", promhttp.Handler())
	go http.ListenAndServe(cfg.Distributors.Gettor.MetricsAddress, nil)

	common.StartEmail(
		&cfg.Distributors.Gettor.Email,
		cfg,
		dist,
		handler,
	)
}

func emailList(items []string) string {
	str := ""
	for _, item := range items {
		str += "\t" + item + "\n"
	}
	return str
}

func sendHelp(dist *gettor.GettorDistributor, send common.SendFunction) error {
	platforms := emailList(dist.SupportedPlatforms())
	body := fmt.Sprintf(helpBody, platforms)
	return send(helpSubject, body)
}

var platformVerfication = map[string]string{
	"win": "\tIf you run Windows, download Gpg4win and run its installer. In order to verify the\n\tsignature you will need to type a few commands in windows command-line, cmd.exe.",
	"osx": "\tIf you are using macOS, you can install GPGTools. In order to verify the signature\n\tyou will need to type a few commands in the Terminal (under \"Applications\").",
	"lin": "\tIf you are using GNU/Linux, then you probably already have GnuPG in your system,\n\tas most GNU/Linux distributions come with it preinstalled. In order to verify the\n\tsignature you will need to type a few commands in a terminal window.",
}

var platformVerficationCommand = map[string]string{
	"win": "gpgv --keyring .\\tor.keyring Downloads\\%s.asc Downloads\\%s",
	"lin": "gpgv --keyring ./tor.keyring ~/Downloads/%s.asc ~/Downloads/%s",
	"osx": "gpgv --keyring ./tor.keyring ~/Downloads/%s.asc ~/Downloads/%s",
}

const (
	linksSubject = "[GetTor] Links for your request"
	linksBody    = `This is an automated email response from GetTor.

You requested Tor Browser for %s.

Step 1: Download Tor Browser

	First, try downloading Tor Browser from our mirrors:


%s
Step 2: Verify the signature (Optional)

	Verifying the signature ensures that a certain package was generated by its
	developers, and has not been tampered with.  This email provides links to signature
	files that have the same name as the Tor Browser file, but end with ".asc" instead.

%s

	The Tor Browser team signs Tor Browser releases. Import the Tor Browser Developers
	signing key (0xEF6E286DDA85EA2A4BA7DE684E2C6E8793298290):

		gpg --auto-key-locate nodefault,wkd --locate-keys torbrowser@torproject.org

	This should show you something like:

		gpg: key 4E2C6E8793298290: public key "Tor Browser Developers (signing key) <torbrowser@torproject.org>" imported
		gpg: Total number processed: 1
		gpg:               imported: 1
		pub   rsa4096 2014-12-15 [C] [expires: 2020-08-24]
		      EF6E286DDA85EA2A4BA7DE684E2C6E8793298290
		uid           [ unknown] Tor Browser Developers (signing key) <torbrowser@torproject.org>
		sub   rsa4096 2018-05-26 [S] [expires: 2020-09-12]

	After importing the key, you can save it to a file (identifying it by fingerprint here):

		gpg --output ./tor.keyring --export 0xEF6E286DDA85EA2A4BA7DE684E2C6E8793298290

	Next, you will need to download the corresponding ".asc" signature file and verify it
	with the command:

		%s

	The result of the command should produce something like this:

		gpgv: Signature made 07/08/19 04:03:49 Pacific Daylight Time
		gpgv:                using RSA key EB774491D9FF06E2
		gpgv: Good signature from "Tor Browser Developers (signing key) <torbrowser@torproject.org>"


Step 3: Get Bridges (Optional)

	If you believe that Tor is blocked where you are, you can use bridges to connect
	to Tor.  Bridges are hidden Tor relays that can circumvent censorship.
	Tor Browser includes a list of built-in bridges, which you should  try first.
	You can activate built-in bridges inside of Tor Browser's settings, under the
	"Connection" menu.  If built-in bridges don't work, try requesting different bridges,
	which you can also do in the "Connection" menu inside Tor Browser's settings.
`
	helpSubject = "[GetTor] Help Email"
	helpBody    = `This is an automated email response from GetTor.

GetTor can send you download links for Tor Browser.
Simply reply to this email and write the operating system you want to install
Tor Browser on in your response. We support the following operating systems:

%s

GetTor will then respond with download instructions.

For example, if you want Tor Browser for Windows your email content will look like:

	windows
`
)
